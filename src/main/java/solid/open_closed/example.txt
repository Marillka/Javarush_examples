Принцип открытоски/закрытости

Этот принцип означает, что классы должны быть открыты для расширения, но закрыты для изменения. Пример - использование композиции и интерфейсов.

Есть классы Engine (двигатель) и LightCar (машина). Чтобы соблюсти принцип откртости/закрытости, добавим объект "двигатель" в класс "машина". Какая может возникнуть проблема? На следующий день приходит инженер и говорит, что у машин будет новый двигатель. Класс Engine необходимо заменить на NewEngine. Получается что класс открытости/закрытости нарушается.

Для решения этой проблемы нужно использовать абстракцию - создать интерфейст двигателя и добавить его в класс к машине.